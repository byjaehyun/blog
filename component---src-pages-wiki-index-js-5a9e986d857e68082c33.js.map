{"version":3,"sources":["webpack:///./src/component/PostListItem.js","webpack:///./src/component/PostList.js","webpack:///./src/pages/wiki/index.js"],"names":["Wrapper","styled","article","hoverCss","Meta","div","Title","h2","Description","PostListItem","title","date","description","slice","length","PostList","render","this","props","markdownNodes","map","node","key","id","href","fields","slug","style","textDecoration","color","frontmatter","gut","React","Component","query","data","allMarkdownRemark","edges"],"mappings":"wJAIMA,EAAUC,IAAOC,QAAV,4EAAGD,CAAH,0DAITE,KAGEC,EAAOH,IAAOI,IAAV,yEAAGJ,CAAH,oDAKJK,EAAQL,IAAOM,GAAV,0EAAGN,CAAH,8GASLO,EAAcP,IAAOI,IAAV,gFAAGJ,CAAH,0FAuBFQ,EAdM,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,YAAhB,OACnB,kBAACZ,EAAD,KACE,kBAACI,EAAD,KAAOO,GACP,kBAACL,EAAD,KAAQI,GAENE,GACA,kBAACJ,EAAD,KACGI,EAAYC,MAAM,EATT,KAUTD,EAAYE,OAVH,KAUyB,SCpCrCd,EAAUC,IAAOI,IAAV,wEAAGJ,CAAH,sDAMPc,E,kGACJC,OAAA,WACE,OACE,kBAAC,EAAD,KACGC,KAAKC,MAAMC,cAAcC,KAAI,SAAAC,GAAI,OAChC,uBACEC,IAAKD,EAAKE,GACVC,KAAMH,EAAKI,OAAOC,KAClBC,MAAO,CAAEC,eAAe,OAASC,MAAM,YAEvC,kBAAC,EAAD,CACEnB,MAAOW,EAAKS,YAAYpB,MACxBC,KAAMU,EAAKS,YAAYnB,KAAKoB,KAAG,EAC/BnB,YAAaS,EAAKS,YAAYlB,oB,GAbrBoB,IAAMC,WA0BdlB,O,kCCtCf,oEAMe,4BACX,kBAAC,IAAD,CACEmB,MAAK,aAwBLlB,OAAQ,SAACmB,GAAD,OAAW,kBAAC,IAAD,KACjB,kBAAC,IAAD,CACEhB,cAAegB,EAAKC,kBAAkBC,MAAMjB,KAC1C,qBAAGC","file":"component---src-pages-wiki-index-js-5a9e986d857e68082c33.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport hoverCss from './hoverCss'\n\nconst Wrapper = styled.article`\n  margin-bottom: 1rem;\n  text-align: center;\n  padding: 1rem;\n  ${hoverCss}\n`\n\nconst Meta = styled.div`\n  font-size: 0.75rem;\n  color: var(--subtitle-color);\n`\n\nconst Title = styled.h2`\n  font-weight: bold;\n  font-size: 1.4rem;\n  line-height: 1.4;\n  margin: 0;\n  word-break: keep-all;\n  color: var(--title-color);\n`\n\nconst Description = styled.div`\n  color: var(--subtitle-color);\n  font-size: 0.8rem;\n  line-height: 1.2rem;\n  word-break: keep-all;\n`\n\nconst maxLength = 100;\n\nconst PostListItem = ({ title, date, description }) => (\n  <Wrapper>\n    <Meta>{date}</Meta>\n    <Title>{title}</Title>\n    {\n      description &&\n      <Description>\n        {description.slice(0, maxLength)}\n        {description.length > maxLength && '...'}\n      </Description>\n    }\n  </Wrapper>\n)\n\nexport default PostListItem\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nimport PostListItem from './PostListItem'\n\nconst Wrapper = styled.div`\n  margin: 0 auto;\n  text-align: center;\n  max-width: 480px;\n  `\n\nclass PostList extends React.Component {\n  render() { \n    return (\n      <Wrapper>\n        {this.props.markdownNodes.map(node => (\n          <a\n            key={node.id}\n            href={node.fields.slug}\n            style={{ textDecoration: `none`, color: `inherit` }}\n          >\n            <PostListItem\n              title={node.frontmatter.title}\n              date={node.frontmatter.date}gut \n              description={node.frontmatter.description}\n            />\n          </a>\n        ))}\n      </Wrapper>\n    )\n  }\n}\n\nPostList.propTypes = {\n  markdownNodes: PropTypes.array,\n}\n\nexport default PostList\n","import React from 'react'\nimport { graphql, StaticQuery } from 'gatsby'\nimport Layout from '../../component/Layout'\nimport PostList from '../../component/PostList'\n\n\nexport default () => (\n    <StaticQuery\n      query={graphql`\n        query WikiQuery {\n          allMarkdownRemark(\n            sort: { order: DESC, fields: [frontmatter___date] }\n            filter: { frontmatter: { templateKey: { eq: \"wiki\" } } }\n          ) {\n            edges {\n              node {\n                excerpt(pruneLength: 400)\n                id\n                fields {\n                  slug\n                }\n                frontmatter {\n                  title\n                  description\n                  templateKey\n                  date(formatString: \"MMMM DD, YYYY\")\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={(data) => (<Layout>  \n        <PostList\n          markdownNodes={data.allMarkdownRemark.edges.map(\n            ({ node }) => node\n          )}\n        />\n      </Layout>)}\n    />\n  )\n"],"sourceRoot":""}