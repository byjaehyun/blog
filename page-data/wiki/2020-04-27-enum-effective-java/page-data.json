{"componentChunkName":"component---src-templates-post-js","path":"/wiki/2020-04-27-enum-effective-java/","result":{"data":{"markdownRemark":{"html":"<h2>상수 대신 enum 을 사용</h2>\n<p>열거 타입 자체는 클래스고, 상수 하나당 자신의 인스턴스를 하나씩 만들어 public static final 필드로 공개한다 </p>\n<pre><code class=\"language-java\">public Enum Apple { FUJI, PIPPIN, GRANNY_SMITH }\n</code></pre>\n<p>클라이언트가 인스턴스를 직접 생성하거나 확장할 수 없다.  열거타입 선언으로 만들어진 인스턴스는 딱 하나만 존재함을 보장한다.</p>\n<p>Strategy enum pattern Use it, if multiple enum constants share common behaviors.</p>\n<pre><code class=\"language-java\">enum PayrollDay{\n        MONDAY(PayType.WEEKDAY),\n        TUESDAY(PayType.WEEKDAY),\n        ...\n        SATURDAY(PayType.WEEKEND),\n        SUNDAY(PayType.WEEKEND);\n\n        private final PayType payType;\n\n        PayrollDay(PayType payType) {this.payType = payType;}\n\n        double pay(double hoursWorked, double payRate){\n            return payType.pay(hoursWorked, payRate);\n        }\n        //The strategy  enum type\n        private enum PayType{\n            WEEKDAY{\n                double overtimePay(double hours, double payRate) { return ...}\n            };\n            WEEKEND{\n                double overtimePay(double hours, double payRate) { return ...}\n            };\n            private static final int HOURS_PER_SHIFT = 8;\n\n            abstract double overtimePay(double hours, double payRate);\n\n            double pay(double hoursWorked, double payRate){\n                double basePay = hoursWorked * payRate;\n                return basePay + overtimePay(hoursWorked, payRate);\n            }\n        }\n    }\n</code></pre>","frontmatter":{"title":"Enum, Effective Java ","date":"2020-04-27","description":null,"keywords":null,"image":"/img/default.jpeg"}},"site":{"siteMetadata":{"image":"/img/og.jpeg"}}},"pageContext":{"slug":"/wiki/2020-04-27-enum-effective-java/"}},"staticQueryHashes":[]}