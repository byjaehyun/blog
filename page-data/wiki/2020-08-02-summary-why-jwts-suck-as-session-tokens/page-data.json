{"componentChunkName":"component---src-templates-post-js","path":"/wiki/2020-08-02-summary-why-jwts-suck-as-session-tokens/","result":{"data":{"markdownRemark":{"html":"<p>This is summary of <a href=\"https://developer.okta.com/blog/2017/08/17/why-jwts-suck-as-session-tokens\">https://developer.okta.com/blog/2017/08/17/why-jwts-suck-as-session-tokens</a></p>\n<h2>TL;DR</h2>\n<ul>\n<li>their contents (the JSON data inside of them) are usually not encrypted. This means that anyone can view the data inside the JWT, even without a key. JWTs don’t try to encrypt your data so nobody else can see it, they simply help you verify that it was created by someone you trust.</li>\n<li>The server can validate this token locally without making any network requests, talking to a database, etc. This can potentially make session management faster because instead of needing to load the user from a database (or cache) on every request, you just need to run a small bit of local code. This is probably the single biggest reason people like using JWTs: they are stateless.</li>\n<li>\n<p>why JWTs suck. </p>\n<ul>\n<li>Size, For example Storing \"abc123:\" demands 51 times larger when using JWT compared to Session.</li>\n<li>Advantage is not that big.  the stateless benefits of a JWT are not being taken advantage of. you’ll likely be talking to the cache server / database regardless of whether or not you’ve got a JWT</li>\n</ul>\n</li>\n<li>\n<p>Conclusion</p>\n<ul>\n<li>Plain old sessions!</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"TL;DR \"Why JWTs Suck as Session Tokens\"","date":"2020-08-02","description":null,"keywords":null,"image":"/img/default.jpeg"}},"site":{"siteMetadata":{"image":"/img/og.jpeg"}}},"pageContext":{"slug":"/wiki/2020-08-02-summary-why-jwts-suck-as-session-tokens/"}},"staticQueryHashes":[]}