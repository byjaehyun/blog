{"data":{"allMarkdownRemark":{"edges":[{"node":{"excerpt":"제목 컴퓨터 과학이 여는 세계 테스트 주도 개발로 배우는 객체 지향 설계와 실천 What I Talk About When I Talk About Running The Catcher in the Rye 칼 세이건의 말 우울할 땐 뇌과학 디커플링 즐거운 나의 집 존리의 부자되기 습관 알고리즘, 인생을 계산하다 고래 인스파이어드 부의 추월차선 삶으로 다시 떠오르기 어딘가 상상도 못 할 곳에, 수많은 순록 때가 주식시장을 이기는 작은 책 파스타 실전 아파치 카프카 마케팅 천재가 된 맥스 설민석의 삼국지 1 이 작은 작은 책은 언제나 나보다 크다 정리하는 뇌 팀장의 탄생 월가의 영웅 마법의 돈 굴리기 개발 7년차, 매니저 1일차 하이 아웃풋 매니지먼트 상자 밖에 있는 사람 두 번째 산","id":"32c46ab7-4a3e-5458-9226-0bef3dce39d7","fields":{"slug":"/wiki/2020-10-01-2020년-도서-목록/"},"frontmatter":{"title":"2020년 책","description":"","templateKey":"wiki","date":"October 01, 2020"}}},{"node":{"excerpt":"함께 자라기 생각의 탄생 DDD start 플랫폼 레볼루션 객체지향의 사실과 오해 Grammar in Use intermedaite 프로젝트가 서쪽으로 간 까닭은 비생산적인 생산의 시간 지금 여기 힙합 사적인 글쓰기 내 문장이 그렇게 이상한가요? 안티프래질 Antifragile 서평 쓰는 법 돈의 역사 싯타르타 분열된 자기 군주론 부끄러움을 가르칩니다 더 저널리스트: 조지오웰 걷는 사람, 하정우 여행의 이유 하버드 100년 전통 말하기 수업 이 사람을 보라 장자 인문학 나는 왜 쓰는가 다큐프라임 자본주의 운을 읽는 변호사 월든 하버드 150년 글쓰기 비법 사업을 한다는 것 행운에 속지 마라 미크로메가스 / 캉디드 혹은 낙관주의 달리기를 말할 때 내가 하고 싶은 이야기 James and the Giant…","id":"3f9e8643-c138-56bb-9b69-a2f40ca1f424","fields":{"slug":"/wiki/2020-10-01-2019년-도서-구매내역/"},"frontmatter":{"title":"2019년 책","description":null,"templateKey":"wiki","date":"October 01, 2020"}}},{"node":{"excerpt":"책 이름 성공과 실패를 결정하는 1%의 네트워크 원리 OS? Oh Yes! 누워서 보는 운영체제 이야기 곁에 두고 읽는 니체 브리프 bunsiness model generation 너무 재밌어서 잠못드는 세계사 맨먼스미신 남아 있는 나날 더 골 좋은 기업을 넘어 위대한 기업으로 파도가 바다의 일이라면 회장님의 메모 혁신기업딜레마 성공하는 기업들의 8가지 습관 마케팅 평가 바이블 린 싱킹 실용주의 프로그래머 실전 파이썬 프로그래밍 디자인의 디자인 샘 월튼 불황없는 소비를 창조하라 스프링 부트 코딩공작소 가장 빨리 만나는 코어 자바…","id":"99f6926a-0af8-592f-982b-ca57254e426b","fields":{"slug":"/wiki/2020-10-01-2018년-도서-구매내역/"},"frontmatter":{"title":"2018년 책","description":null,"templateKey":"wiki","date":"October 01, 2020"}}},{"node":{"excerpt":"01. 신뢰할 수 있고 확장 가능하며 유지보수하기 쉬운 애플리케이션 많은 애플리케이션은 계산보다는 데이터 중심적이다. 데이터 중심적인 애플리케이션은 아래 5개 저장하기 위한 데이터베이스 읽기 속도 향상을 위한 캐시 검색이나 필터를 위한 색인 비동기를 위한 메시지 스트림 처리 누적된 데이터를 분석하는 배치 처리 데이터 저장도구간 경계가 흐려지고 있다. 카프카도 지속성(durability) 를 보장하고, 레디스도 메시지 큐로 쓸 수 있는 것 처럼. 소프트웨어 중요한 3가지 관심사 ⇒ 신뢰성, 확장성, 유지보수성 신뢰성 기능 수행, 예기치 못한 사용 허용 부하에서의 작동 허가되지 않은 접근과 오남용 방지 확장성 부하가 늘어도 동작해야 한다. 트위터 사례 트윗피드는 select…","id":"d417b28a-e167-55c3-a410-0ade48e3a105","fields":{"slug":"/wiki/2020-09-16-데이터-중심-어플리케이션-설계-갈무리/"},"frontmatter":{"title":"데이터 중심 어플리케이션 설계 갈무리","description":null,"templateKey":"wiki","date":"September 16, 2020"}}},{"node":{"excerpt":"This is scrape of https://www.baeldung.com/jackson-field-serializable-deserializable-or-not Public field A Getter Makes a Non-Public Field Serializable and Deserializable A Setter Makes a Non-Public Field Deserializable Only show two different ways of deserializing immutable Java objects. https://www.baeldung.com/jackson-deserialize-immutable-objects","id":"25569b94-4443-5a43-bb86-e463a6a68067","fields":{"slug":"/wiki/2020-08-02-tl-dr-jackson-serialize/"},"frontmatter":{"title":"TL;DR Jackson serialize","description":null,"templateKey":"wiki","date":"August 02, 2020"}}},{"node":{"excerpt":"This is summary of https://developer.okta.com/blog/2017/08/17/why-jwts-suck-as-session-tokens TL;DR their contents (the JSON data inside of them) are usually not encrypted. This means that anyone can view the data inside the JWT, even without a key. JWTs don’t try to encrypt your data so nobody else can see it, they simply help you verify that it was created by someone you trust. The server can…","id":"89faae2c-deab-5299-a6fa-d4d175c15600","fields":{"slug":"/wiki/2020-08-02-summary-why-jwts-suck-as-session-tokens/"},"frontmatter":{"title":"TL;DR \"Why JWTs Suck as Session Tokens\"","description":null,"templateKey":"wiki","date":"August 02, 2020"}}},{"node":{"excerpt":"write-ahead logging (WAL) is a family of techniques for providing atomicity and durability (two of the ACID properties) in database systems. The changes are first recorded in the log, which must be written to stable storage, before the changes are written to the database.  write the log records associated with a particular modification before it writes the page to the disk.  I think it has similar…","id":"3b6bc479-7e5a-57e7-afea-1addb505aa56","fields":{"slug":"/wiki/2020-07-26-write-ahead-logging/"},"frontmatter":{"title":"Write-ahead logging","description":null,"templateKey":"wiki","date":"July 26, 2020"}}},{"node":{"excerpt":"I read \"Data Structures & Algorithms I Actually Used Working at Tech Companies\".  After reading, I just pick one thing that i want to know with details. So i choose \"Hash\" because it is used widely and frequently. What is hash function or hashing. A hash function is any function that can be used to map data of arbitrary size to fixed-size values. The values are used to index a fixed-size table…","id":"d074c1e1-dd46-5d59-8d25-39929c094ab1","fields":{"slug":"/wiki/2020-07-18-hash-function-hash-table/"},"frontmatter":{"title":"Hash function & Hash table","description":null,"templateKey":"wiki","date":"July 18, 2020"}}},{"node":{"excerpt":"","id":"8be3a72b-7dca-5762-bd4c-e69bdfde2804","fields":{"slug":"/wiki/2020-07-17-install-multiple-java-using-jenv-for-osx/"},"frontmatter":{"title":"Install multiple java using jenv for osx","description":null,"templateKey":"wiki","date":"July 17, 2020"}}},{"node":{"excerpt":"In computer science, declarative programming is a programming paradigm—a style of building the structure and elements of computer programs—that expresses the logic of a computation without describing its control flow. This is in contrast with imperative programming, which implements algorithms in explicit steps.[1] For example.  [1] https://en.wikipedia.org/wiki/Declarative_programming","id":"dfd9da40-0e5b-53c0-a5ff-19c2668fdb46","fields":{"slug":"/wiki/2020-07-11-declarative-imperative-in-computer-science/"},"frontmatter":{"title":"Declarative, Imperative in computer science","description":null,"templateKey":"wiki","date":"July 11, 2020"}}},{"node":{"excerpt":"채권의 가격 금융의 본질은 돈을 빌리고 빌려주는 것이다. 채권은 발행자가 '일정 기간 동안 원금과 이자를 상환하겠다'고 약속한 증서이다. 채권 액면과와 채권을 사고파는 가격은 다를 수 있다. 왜냐하면 돈은 시간이 지나면서 이자수익(손실)을 발생 시킬 수 있기 때문이다. 미래에 채권의 가치를 얻기위해 현재 은행금리로 얼마를 예금해야 할 것인가에 따라 채권가격이 결정된다. 오전에 1억을 주고산 채권이 있었고, 오전에 일반 금리가 20%에서 30%로 올랐다면 오전에 채권의 가치는 떨어진다. 오전에는 지금의 1억이 1년후에 1억2천을 가져다 준다고 가정하고 구매했을 것이다. 하지만 금리가 30%일 때 1년후 1억 2천을 얻기 위해서는 현시점이서 9천 20…","id":"8e398484-49ff-51b8-925b-3c1588e6ee4d","fields":{"slug":"/wiki/2020-04-27-채권/"},"frontmatter":{"title":"채권","description":null,"templateKey":"wiki","date":"April 27, 2020"}}},{"node":{"excerpt":"상수 대신 enum 을 사용 열거 타입 자체는 클래스고, 상수 하나당 자신의 인스턴스를 하나씩 만들어 public static final 필드로 공개한다  클라이언트가 인스턴스를 직접 생성하거나 확장할 수 없다.  열거타입 선언으로 만들어진 인스턴스는 딱 하나만 존재함을 보장한다. Strategy enum pattern Use it, if multiple enum constants share common behaviors.","id":"093c44ab-20c5-5031-a005-b5bf3ac8c39f","fields":{"slug":"/wiki/2020-04-27-enum-effective-java/"},"frontmatter":{"title":"Enum, Effective Java ","description":null,"templateKey":"wiki","date":"April 27, 2020"}}},{"node":{"excerpt":"Why ? 성능 관점이라기 보다는 다양한 분산 시스템에서 데이터 제어에 적합해 보여서 공부 시작.  http 보다는 메시지 기반 통합 순차처리, 펍섭, 큐잉 등 다양한 기능이 있는것으로 보임 Kafka as a Storage System 의 관점에서  왜 카프카를 알아야 하는가? 링크드인이 rabbitmq, redis 등을 이용하여 분산환경 데이터 흐름을 제어하는데 유지보수에 어려움을 느껴 카프카를 만들었다고 함. 데이터를 중앙관리하기 위함 카프카 왜 잘되나? 성능 좋음(분산/병렬처리, 실시간성) 확장성 뛰어남( 브로커 수평확장 가능, fault tolerant ) undeleted log…","id":"e8cacdbd-805b-50b8-8db9-b3e00f72c087","fields":{"slug":"/wiki/2020-04-05-아파치-카프카-정리/"},"frontmatter":{"title":"아파치 카프카 정리","description":"","templateKey":"wiki","date":"April 05, 2020"}}},{"node":{"excerpt":"숫자만 아는 컴퓨터가 문자를 표현해야 했다. 컴퓨터는 원래 계산기였다. 1+1 = 2; 의 수학적인 표현을 위한 것이었으나, 당연하게도 곧 지나 문자열을 표현해야 했다. 컴퓨터는 숫자밖에 모르는 바보였으므로, 문자열을 숫자와 연결하는 약속이 필요했다. 가령 a 는 97, b는 98 이런식으로 숫자와 문자를 지정하여 약속하였다. 이것이 아스키 테이블(ASCCI TABLE) 이다. 초창기 아스키는 영어만 고려하여 128개의 문자만 표에 있었다. 따라서 1 byte 로 충분히 표현가능 했다. 다양한 문자열을 담는 유니코드, 그리고 인코딩 아스키는 128개의 문자열만 고려되었지만, 유니코드는 세계의 다앙햔 문자열을 고려하기 위해 1byte 이상이 필요 했다. 이러다보니 유니코드는 1~4byte…","id":"fe64b33f-b018-58c1-b578-f1252f957653","fields":{"slug":"/wiki/2020-04-05-내가-겪었던-인코딩-이야기/"},"frontmatter":{"title":"익숙하지만 정확히 몰랐던 인코딩 정리","description":"ASCII, UTF8, EUC-KR, UTF8MB4 ","templateKey":"wiki","date":"April 05, 2020"}}},{"node":{"excerpt":"Checked vs Unchecked Checked Exception : checked at compile, RuntimeException 이외의 모든 에러 Unchecked Exception : RuntimeException 에러  Effective java item 69. 예외는 진짜 예외 상황에만 사용하라 예외는 예외 상황에 쓸 용도로 설계되었다. JVM 입장에서는 try catch 블록안에 넣으면 최적화 제한적이다. 예외는 일상적인 제어 흐름용으로 쓰여선 안되며, 이를 프로그레머에게 강요하는 API 를 만들어서도 안된다. 잘 설계된 API…","id":"e763d681-1ea0-531e-bf65-135febaf0849","fields":{"slug":"/wiki/2020-03-29-java-예외처리-feat-effective-java/"},"frontmatter":{"title":"Java 예외처리 ( feat. Effective java )","description":null,"templateKey":"wiki","date":"March 29, 2020"}}},{"node":{"excerpt":"바운디드 컨텍스트? 보편언어? Bounded Context: Multiple models are in play on any large project. DDD에서는 복잡하고 규모가 커지면 맥락의 경계를 명확하게 정의하라고 제안한다. 그 단위가 바운디드 컨텍스트이다. DDD 는 서로 다른 개념들은 각기 다른 바운디드 컨텍스트 안으로 분리해 놓음으로써 개념간 차이를 더욱 중시한다. 즉 각기 다른 언어와 그에 따른 기능이 존재하는 것을 인정하는 것이다. 가령 보험회사에서의 정책이란 사업부서마다 그 의미가 다른데, 모두 하나의 정책으로 통합하려고 한다면, 분명 문제가 발생할 것이다. In those younger days we were advised to build a unified model of the…","id":"598d68d7-e035-50d2-ab67-89348f370e6b","fields":{"slug":"/wiki/2020-02-16-ddd-1-바운디드-컨텍스트-보편언어/"},"frontmatter":{"title":"DDD, 도메인 주도 개발 정리","description":"반 버논의 도메인 주도 설계 핵심을 읽으며 요약","templateKey":"wiki","date":"February 16, 2020"}}},{"node":{"excerpt":"JPA 소개 SQL를 직접 다룰 때 발생하는 문제점 CRUD에 대한 비슷한 SQL를 반복적으로 작성해야한다. SQL에 의존적인 개발을 한다. 만약 회원 정보에 전화번호 필드와 컬럼을 추가한다면 관련된 모든 SQL를 수정해야한다. 모델링 객체에서 SQL을 의존하지만 산뢰할 수 없어, 진정한 의미의 계층 분리가 아니다. 객체지향 프로그래밍과 데이터베이스의 패러다임 불일치 객체는 상속이라는 기능을 가지고 있지만, 테이블은 없다.  만약 위와같은 상황에서 Item, Album, Movie, Book 테이블이 따로 존재한다고 하면, 실질적으로 하나의 객체를 다루는데 2개의 테이블에 대한 SQL…","id":"252a9b8d-9960-50ab-828f-a507e6dcba67","fields":{"slug":"/wiki/2020-02-01-jpa-entity-status/"},"frontmatter":{"title":"my JPA wiki","description":null,"templateKey":"wiki","date":"February 01, 2020"}}},{"node":{"excerpt":"Transaction, Isolation, Lock, Concurrency A transaction is a logical unit of work. A minimum unit is defined by work process, not a system or a technical thing. These transactions have an ACID (Atomicity, Consistency, Isolation, Durability) characteristic. Isolation is to prevent other transactions from approaching while data are being processed by some transactions. DBMS provides a \"Lock…","id":"3ce90d61-2a3c-5642-a32f-04adb83f9a5b","fields":{"slug":"/wiki/2020-01-26-transaction-isolation-level-on-database/"},"frontmatter":{"title":"Transaction, isolation level on database","description":"A transaction is a logical unit of work. A minimum unit is defined by work process, not a system or a technical thing.","templateKey":"wiki","date":"January 26, 2020"}}}]}}}